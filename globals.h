#ifndef __GLOBALS__
#define __GLOBALS__

#include "Arduino.h"
#include "RTCLib.h"

#define MATRIX_HEIGHT 16
#define MATRIX_WIDTH  24

unsigned long timeRef;
unsigned long timeOutRef;
//uint8_t pwmStep = 0;
//const uint8_t pwmMax = 16;
//volatile uint8_t pwmLevel = 10; //range 5 - 10 (50% - 100%)
bool fadeDir = false;

//RTC Keeping method
#define USE_DS1307   0

//Change this to one of the three above to change which chip (or software) is used
#define RTC_METHOD USE_DS1307

//RTC_Base *RTC = NULL;

volatile uint8_t bSave = 0;
volatile uint16_t bCount = 0;
volatile boolean holdFlag = false;
uint16_t holdMax = 60;

//Valid state machine states
#define STATE_CLOCK      0
#define STATE_MANUAL_SET 1
volatile uint8_t curState = STATE_CLOCK;

//For manually setting the time and used with curSet
#define SET_YR   	0
#define SET_MON 	1
#define SET_DAY		2
#define SET_HR		3
#define SET_MIN	        4

//helpers for button handling
#define BUTTON_A _BV(PIND2)
#define BUTTON_B _BV(PIND3)
#define BUTTON_MASK (BUTTON_A | BUTTON_B)
#define BUTTON_STATE PIND & BUTTON_MASK

//Who can ever remember what the prescaler combinations are?
//These are for Timer0
#define PRESCALE0_1 _BV(CS00)
#define PRESCALE0_8 _BV(CS01)
#define PRESCALE0_64 (_BV(CS01) | _BV(CS00))
#define PRESCALE0_256 _BV(CS02)
#define PRESCALE0_1024 (_BV(CS02) | _BV(CS00))

//These are for Timer1
#define PRESCALE1_1 _BV(CS10)
#define PRESCALE1_8 _BV(CS11)
#define PRESCALE1_64 (_BV(CS11) | _BV(CS10))
#define PRESCALE1_256 _BV(CS12)
#define PRESCALE1_1024 (_BV(CS12) | _BV(CS10))

//These are for Timer2
#define PRESCALE2_1 _BV(CS20)
#define PRESCALE2_8 _BV(CS21)
#define PRESCALE2_32 (_BV(CS21) | _BV(CS20))
#define PRESCALE2_64 _BV(CS22)
#define PRESCALE2_128 (_BV(CS20) | _BV(CS22))
#define PRESCALE2_256 (_BV(CS22) | _BV(CS21))
#define PRESCALE2_1024 (_BV(CS22) | _BV(CS21) | _BV(CS20))

volatile uint8_t curSet = SET_YR;
volatile uint8_t setValues[5] = {
	0,0,0,0,0};
DateTime dt_now = DateTime();
bool setChanged = false;
bool timeUpdated = false;
bool timeReady = false;
bool setCancel = false;

//Limits for each field value and for months
//Store in progmem since they are rarely used.
PROGMEM const uint8_t
	//YY . MM . DD   HH : MM
	limit[]       = {  
		36,  12,  31,  23,  59} //limiting year to 36, since 99 is just asking for problems.
,
	daysInMonth[] = { 
		31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

//helpers for handling world pixels
uint8_t world[3][24][2];
uint8_t worldIndex[3] = {0,1,2};

volatile bool _displayUpdated = false;

void clearWorld(uint8_t num = 0)
{
	noInterrupts();
	if(num < 0 || num > 2) return;
	num = worldIndex[num];
	memset(world[num], 0, 48);
	interrupts();
}
__attribute__((noinline)) bool getDispPixel(uint8_t x, uint8_t y, uint8_t num)
{
	static uint8_t rowByte = 0; // 0 means top 8, 1 means bottom 8
	static uint8_t rowBit = 0;

	if(num < 0 || num > 2) return false;
	num = worldIndex[num];

	rowByte = y >> 3;
	rowBit = y&7;

	return (world[num][x][rowByte] & (1 << rowBit)) > 0;
}

__attribute__((noinline)) void setDispPixel(uint8_t x, uint8_t y, uint8_t num, bool state)
{
	static uint8_t rowByte = 0; // 0 means top 8, 1 means bottom 8
	static uint8_t rowBit = 0;

	if(num < 0 || num > 2) return;
	num = worldIndex[num];
	
	rowByte = y >> 3;
	rowBit = y&7;

	if(state)
		world[num][x][rowByte] |= (1 << rowBit);
	else
		world[num][x][rowByte] &= ~(1 << rowBit);
}
static const unsigned char  fontSm[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x60, 0x38, 0x0E, 0x03, // /
	0x3E, 0x41, 0x41, 0x3E, //0
	0x00, 0x42, 0x7F, 0x40, //1
	0x62, 0x51, 0x49, 0x46, //2
	0x22, 0x49, 0x49, 0x36,//3
	0x0F, 0x08, 0x7F, 0x08, //4
	0x47, 0x49, 0x49, 0x31, //5
	0x3E, 0x49, 0x49, 0x30, //6
	0x01, 0x61, 0x19, 0x07, //7
	0x36, 0x49, 0x49, 0x36, //8
	0x06, 0x49, 0x49, 0x3E, //9
	0x00, 0x36, 0x36, 0x00, // :
	0x0, 0x36, 0x76, 0x0, // ;
	0x8, 0x14, 0x22, 0x22, // <
	0x14, 0x14, 0x14, 0x14, // =
	0x22, 0x22, 0x14, 0x8,// >
	0x6, 0x1, 0x59, 0x6, // ?
	0x3E, 0x41, 0x5D, 0x5E, // @
	0x7E, 0x9, 0x9, 0x7E, //A
	0x7F, 0x49, 0x49, 0x36, //B
	0x3E, 0x41, 0x41, 0x22, //C
	0x7F, 0x41, 0x22, 0x1C,//D
	0x7F, 0x49, 0x49, 0x41, //E
	0x7F, 0x9, 0x9, 0x1, //F
	0x3E, 0x41, 0x49, 0x3A, //G
	0x7F, 0x8, 0x8, 0x7F, //H
	0x41, 0x41, 0x7F, 0x41, //I
	0x30, 0x40, 0x40, 0x3F,//J
	0x7F, 0xC, 0x12, 0x61, //K
	0x7F, 0x40, 0x40, 0x40, //L
	0x7F, 0x6, 0x6, 0x7F, //M
	0x7F, 0x6, 0x38, 0x7F, //N
	0x3E, 0x41, 0x41, 0x3E, //O
	0x7F, 0x9, 0x9, 0x6, //P
	0x1E, 0x21, 0x31, 0x5E,//Q
	0x7F, 0x9, 0x19, 0x66,//R
	0x26, 0x49, 0x49, 0x32,//S
	0x1, 0x1, 0x7F, 0x1,//T
	0x3F, 0x40, 0x40, 0x3F,//U
	0xF, 0x30, 0x60, 0x1F,//V
	0x7F, 0x30, 0x30, 0x7F,//W
	0x77, 0xC, 0x18, 0x77,//X
	0x7, 0x8, 0x78, 0x7,//Y
	0x61, 0x59, 0x45, 0x43,//Z
};

void getUnixStringSeg(uint16_t sub, char * output)
{
	memset(output, 0, 6);
	static uint8_t val = 0;
	for(int i = 4; i>=0; i--)
	{
		val = sub % 10;
		output[i] = 48+val;
		sub = sub / 10;
	}
	output[5] = 0;
}



#endif
