#include <avr/io.h>
#include <avr/pgmspace.h> 
 
#ifndef FONT5X8_H
#define FONT5X8_H
/* USAGE
char c = 'a';
uint8_t index = pgm_read_byte(&index_list[c]);
uint8_t offset = pgm_read_byte(&offset_list[index]);
uint8_t width = pgm_read_byte(&widths[index]);
static uint8_t charData = 0;
for(int x=offset; x < width+offset; x++)
{
    charData = pgm_read_byte(&font[offset + x]);
    //use charData here
}
*/

//for each ascii code 0-128, index_list resolves it's value to it's index in
//the arrays offset_list[] and widths[]
static uint8_t index_list[] PROGMEM = { 1,0,1,2,3,1,1,1,1,1,1,1,1,1,1,1,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,1, };

//gets the offset of a char in font[], given the index from above
static uint8_t offset_list[] PROGMEM = { 5,13,20,27,31,35,37,38,41,46,51,58,63,64,67,70,75,80,82,87,88,93,98,101,106,111,116,121,126,131,136,141,142,144,148,153,157,162,167,172,177,182,187,192,197,202,207,210,215,220,225,230,235,240,245,250,255,260,265,270,275,280,285,290,295,298,303,306,311,316,319,324,329,334,339,344,349,354,359,362,366,371,374,379,384,389,394,399,404,409,414,419,424,429,434,439,444,449,450,455,460, };

//gets the width in total bytes of a char, given the index from above
static uint8_t widths[] PROGMEM = { 5,8,7,7,4,4,2,1,3,5,5,7,5,1,3,3,5,5,2,5,1,5,5,3,5,5,5,5,5,5,5,5,1,2,4,5,4,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,3,5,5,3,5,5,5,5,5,5,5,5,3,4,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5, };

//stores the actual character data
static uint8_t font[] PROGMEM = {
	0x7f,0x41,0x41,0x41,0x7f, // SPECIAL
	0x3c,0x42,0x95,0xa1,0xa1,0x95,0x42,0x3c, // SPECIAL
	0x0e,0x1f,0x3f,0x7e,0x3f,0x1f,0x0e, // SPECIAL
	0x08,0x1c,0x3e,0x7f,0x3e,0x1c,0x08, // SPECIAL
	0x7f,0x3e,0x1c,0x08, // SPECIAL
	0x08,0x1c,0x3e,0x7f, // SPECIAL
	0x00,0x00, // Space
	0x5f, // !
	0x07,0x00,0x07, // "
	0x14,0x7f,0x14,0x7f,0x14, // #
	0x24,0x2a,0x7f,0x2a,0x12, // $
	0x03,0x23,0x10,0x08,0x04,0x62,0x60, // %
	0x36,0x49,0x56,0x20,0x50, // &
	0x07, // '
	0x1c,0x22,0x41, // (
	0x41,0x22,0x1c, // )
	0x22,0x14,0x7f,0x14,0x22, // *
	0x08,0x08,0x3e,0x08,0x08, // +
	0x80,0x60, // ,
	0x08,0x08,0x08,0x08,0x08, // -
	0x40, // .
	0x20,0x10,0x08,0x04,0x02, // /
	0x3e,0x51,0x49,0x45,0x3e, // 0
	0x42,0x7f,0x40, // 1
	0x62,0x51,0x49,0x49,0x46, // 2
	0x21,0x41,0x49,0x4d,0x33, // 3
	0x18,0x14,0x12,0x7f,0x10, // 4
	0x27,0x45,0x45,0x45,0x39, // 5
	0x3c,0x4a,0x49,0x49,0x31, // 6
	0x01,0x71,0x09,0x05,0x03, // 7
	0x36,0x49,0x49,0x49,0x36, // 8
	0x46,0x49,0x49,0x29,0x1e, // 9
	0x28, // :
	0x80,0x68, // ;
	0x08,0x14,0x22,0x41, // <
	0x14,0x14,0x14,0x14,0x14, // =
	0x41,0x22,0x14,0x08, // >
	0x02,0x01,0x59,0x05,0x02, // ?
	0x3e,0x41,0x5d,0x59,0x4e, // @
	0x7c,0x12,0x11,0x12,0x7c, // A
	0x7f,0x49,0x49,0x49,0x36, // B
	0x3e,0x41,0x41,0x41,0x22, // C
	0x7f,0x41,0x41,0x41,0x3e, // D
	0x7f,0x49,0x49,0x49,0x41, // E
	0x7f,0x09,0x09,0x09,0x01, // F
	0x3e,0x41,0x41,0x51,0x71, // G
	0x7f,0x08,0x08,0x08,0x7f, // H
	0x41,0x7f,0x41, // I
	0x20,0x40,0x40,0x40,0x3f, // J
	0x7f,0x08,0x14,0x22,0x41, // K
	0x7f,0x40,0x40,0x40,0x40, // L
	0x7f,0x02,0x0c,0x02,0x7f, // M
	0x7f,0x04,0x08,0x10,0x7f, // N
	0x3e,0x41,0x41,0x41,0x3e, // O
	0x7f,0x09,0x09,0x09,0x06, // P
	0x3e,0x41,0x51,0x21,0x5e, // Q
	0x7f,0x09,0x19,0x29,0x46, // R
	0x26,0x49,0x49,0x49,0x32, // S
	0x01,0x01,0x7f,0x01,0x01, // T
	0x3f,0x40,0x40,0x40,0x3f, // U
	0x1f,0x20,0x40,0x20,0x1f, // V
	0x7f,0x20,0x18,0x20,0x7f, // W
	0x63,0x14,0x08,0x14,0x63, // X
	0x03,0x04,0x78,0x04,0x03, // Y
	0x61,0x51,0x49,0x45,0x43, // Z
	0x7f,0x41,0x41, // [
	0x02,0x04,0x08,0x10,0x20, // \
	0x41,0x41,0x7f, // ]
	0x08,0x04,0x02,0x04,0x08, // ^
	0x40,0x40,0x40,0x40,0x40, // _
	0x01,0x02,0x04, // `
	0x20,0x54,0x54,0x54,0x78, // a
	0x7f,0x44,0x44,0x44,0x38, // b
	0x38,0x44,0x44,0x44,0x44, // c
	0x38,0x44,0x44,0x44,0x7f, // d
	0x38,0x54,0x54,0x54,0x58, // e
	0x08,0x7e,0x09,0x09,0x02, // f
	0x18,0xa4,0xa4,0xa4,0x78, // g
	0x7f,0x04,0x04,0x04,0x78, // h
	0x44,0x7d,0x40, // i
	0x40,0x80,0x84,0x7d, // j
	0x7f,0x10,0x10,0x28,0x44, // k
	0x41,0x7f,0x40, // l
	0x7c,0x04,0x18,0x04,0x7c, // m
	0x7c,0x04,0x04,0x04,0x78, // n
	0x38,0x44,0x44,0x44,0x38, // o
	0xfe,0x22,0x22,0x22,0x1c, // p
	0x1c,0x22,0x22,0x22,0xfe, // q
	0x7c,0x08,0x04,0x04,0x04, // r
	0x48,0x54,0x54,0x54,0x24, // s
	0x04,0x3f,0x44,0x44,0x20, // t
	0x3c,0x40,0x40,0x20,0x7c, // u
	0x1c,0x20,0x40,0x20,0x1c, // v
	0x7c,0x40,0x30,0x40,0x7c, // w
	0x44,0x28,0x10,0x28,0x44, // x
	0x1c,0xa0,0xa0,0xa0,0x7c, // y
	0x44,0x64,0x54,0x4c,0x44, // z
	0x08,0x3e,0x77,0x41,0x41, // {
	0x7f, // |
	0x41,0x41,0x77,0x3e,0x08, // }
	0x02,0x01,0x03,0x02,0x01, // ~

};
#endif
